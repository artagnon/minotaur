#!/usr/bin/env perl

# Copyright (c) 2020-present, author: Zhengyang Liu (liuz@cs.utah.edu).
# Distributed under the MIT license that can be found in the LICENSE file.
# borrowed from souper

use warnings;
use strict;
use Redis;
use Getopt::Long;
use File::Temp;
use Time::HiRes;

my $llvmas  = "@LLVM_BINARY_DIR@/bin/llvm-as";
my $llvmopt = "@LLVM_BINARY_DIR@/bin/opt";

sub runit ($) {
    my $cmd = shift;
    my $res = (system "$cmd");
    return $? >> 8;
}

sub usage() {
    print <<'END';
Options:
  -dumpall                                           dump all LHSs
  -tofiles                                           dump all LHSs to files
  -sort=timestamp|costdiff|reduce|cutsize|profile    sort optimizations
  -verbose
END
    exit -1;
}

my $REDISPORT = 6379;
my $DUMPALL = 0;
my $TOFILES = 0;
my $SORT = "timestamp";
my $VERBOSE = 0;
my $UNIX = 0;

GetOptions(
    "dumpall" => \$DUMPALL,
    "tofiles" => \$TOFILES,
    "redis-port=i" => \$REDISPORT,
    "sort=s" => \$SORT,
    "verbose" => \$VERBOSE,
    ) or usage();
usage() unless ($SORT eq "timestamp" ||
                $SORT eq "costdiff"  ||
                $SORT eq "reduce"    ||
                $SORT eq "cutsize"   ||
                $SORT eq "profile");

my $noopt_count=0;

my $r;
if ($UNIX) {
    $r = Redis->new(sock => "@CMAKE_BINARY_DIR@/cache.sock");
} else {
    $r = Redis->new(server => "localhost:" . $REDISPORT);
}
$r->ping || die "no server?";
my @all_keys = $r->keys('*');

print "; Inspecting ".scalar(@all_keys)." Redis values\n";

sub parse($) {
    (my $opt) = @_;
    (my $fh, my $tmpfn) = File::Temp::tempfile();
    print $fh $opt;
    $fh->flush();
    open INF, "cat < $tmpfn 2>&1 |";
    my $output = "";
    my $success = 0;
    while (my $line = <INF>) {
        $success = 1 if ($line =~ /success/);
        next if ($line =~ /^;/);
        $output .= $line;
    }
    close INF;
    close $fh;
    unlink $tmpfn;
    return $output;
}

my %toprint;
my %ir;
my %rewrite;
my %costafter;
my %costbefore;
my %costdiff;
my %reduce;
my %timestamp;
my %fn_name;
my %profile;
my %noopt;
my %optbc;
my %cutsize;

if ($DUMPALL) {
    print "; Dumping all ".scalar(keys @all_keys)." rewrites\n";
    my $count = 0;
    foreach my $opt (@all_keys) {
        my %h = $r->hgetall($opt);
        my $time    = $h{"timestamp"};
        my $fn      = $h{"fn"};
        my $profile = $h{"profile"};
        my $rewrite = $h{"rewrite"};
        my $ir      = parse($opt);
        if ($TOFILES) {
            open(my $fh, ">", "dump_$count.ll");
            print $fh $ir;
            $fh->flush();
            close $fh;
        } else {
            print $ir, "\n";
            print "rewrite: $rewrite\n";
            print "timestamp: $time\n";
            print "profile: $profile\n";
            print "in fn: $fn\n";
            print "\n------------------------------------------------------\n";
        }
        $count = $count + 1;
    }
    exit(0);
}

foreach my $opt (@all_keys) {
    my %h = $r->hgetall($opt);

    my $rewrite  = $h{"rewrite"};
    $noopt{$opt} = $rewrite eq "<no-sol>";

    if ($noopt{$opt}) {
        $noopt_count++;
        next;
    }

    my $time    = $h{"timestamp"};
    my $fn      = $h{"fn"};
    my $pf      = $h{"profile"};
    my $ca     = $h{"costafter"};
    my $cb     = $h{"costbefore"};
    if ($cb == 0) {
        $cb = 1;
    }
    if ($ca == 0) {
        $ca = 1;
    }

    $ir{$opt} = parse($opt);

    $toprint{$opt} = 1;
    $costafter{$opt} = $ca;
    $costbefore{$opt} = $cb;
    $costdiff{$opt} = $cb - $ca;
    $reduce{$opt} = ($cb - $ca * 1.0) / $cb;
    $rewrite{$opt} = $rewrite;
    $cutsize{$opt} = length($optbc{$opt});
    $profile{$opt} = $pf;
    $fn_name{$opt} = $fn;
    $timestamp{$opt} = $time;
}


print "; Discarding ${noopt_count} not-optimizations leaving ".
    scalar(keys %toprint)." optimizations\n";

# print "\n\n";

sub bytimestamp { $timestamp{$b} <=> $timestamp{$a} }
sub bycostdiff { $costdiff{$b} <=> $costdiff{$a} }
sub byreduce { $reduce{$b} <=> $reduce{$a} }
sub bycutsize { $cutsize{$b} <=> $cutsize{$a} }
sub byprofile { $profile{$b} <=> $profile{$a} }

my $byx;
$byx = \&bytimestamp if ($SORT eq "timestamp");
$byx = \&bycostdiff if ($SORT eq "costdiff");
$byx = \&byreduce if ($SORT eq "reduce");
$byx = \&bycutsize if ($SORT eq "cutsize");
$byx = \&byprofile if ($SORT eq "profile");


my $count = 0;
foreach my $opt (sort $byx keys %toprint) {
    my $ir      = $ir{$opt};
    my $time    = $timestamp{$opt};
    my $fn      = $fn_name{$opt};
    my $rewrite = $rewrite{$opt};
    my $ca      = $costafter{$opt};
    my $cb      = $costbefore{$opt};
    my $pf      = $profile{$opt};

    if ($TOFILES) {
        open(my $fh, ">", "dump_$count.src.ll");
        print $fh $ir, "\n";
        $fh->flush();
        close $fh;
    } else {
        print "; opt ---------------------------------------------------\n";
        print $ir;
        print "; minotaur_rewrite: $rewrite \n";
        print "; minotaur_cost-before: $cb\n";
        print "; minotaur_cost-after: $ca\n";
        print "; minotaur_timestamp: $time\n";
        print "; minotaur_profile: $pf\n";
        print "; minotaur_fn: $fn\n";
    }
    $count = $count + 1;
}

# my $cnt = 0;
# foreach my $opt (keys %toprint) {
#     $cnt += $sprofiles{$opt};
# }
# print "; overall total static profile weight = $cnt\n";
# print "; $tagged were tagged by cache_infer, $untagged were not\n";
